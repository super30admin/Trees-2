Time Complexity: O(n)
Space complexity: O(n)
Did this code successfully submitted on leetcode: Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
      
        if (inorder.length == 0 || postorder.length == 0) 
            return null;
    
        int ip = inorder.length - 1;
    
        int pp = postorder.length - 1;
    
    
        Stack<TreeNode> stack = new Stack<TreeNode>();
    
        TreeNode prev = null;
    
        TreeNode root = new TreeNode(postorder[pp]);
    
        stack.push(root);
    
        pp--;
    
    
        while (pp >= 0) {
        
            while (!stack.isEmpty() && stack.peek().val == inorder[ip]) {
                prev = stack.pop();
                ip--;
            }
        
            TreeNode newNode = new TreeNode(postorder[pp]);
        
            if (prev != null) {
            
                prev.left = newNode;
        
            } 
            else if (!stack.isEmpty()) {
            
                TreeNode currTop = stack.peek();
            
                currTop.right = newNode;
        
            }
        
            stack.push(newNode);
        
            prev = null;
        
            pp--;
        }
    
    return root;
    }
}

{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def buildTree(self, inorder: List[int], postorder: List[int]) -> Optional[TreeNode]:\
        \
        if len(postorder) == 0 or len(inorder) == 0:\
            return None\
        \
        root = TreeNode(postorder[-1])\
        rootval = postorder[-1]\
        rootidx = -1\
        \
        for i in range(len(inorder)):\
            if rootval == inorder[i]:\
                rootidx = i\
                break\
        \
        inleft = inorder[0:rootidx]\
        inright = inorder[rootidx + 1: len(inorder)]\
        poleft = postorder[0:len(inleft)]\
        poright = postorder[len(inleft): len(postorder) - 1]\
        \
        root.left = self.buildTree(inleft, poleft)\
        root.right = self.buildTree(inright, poright)\
        \
        return root\
        }
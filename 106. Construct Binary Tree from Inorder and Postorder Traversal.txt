// Time Complexity : O(n)
// Space Complexity : O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

we build right side first and then left as we are using postorder array

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index=0;
    HashMap<Integer, Integer> map = new HashMap<>();
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        for(int i=0; i<inorder.length;i++){
            map.put(inorder[i], i);
        }
        index=postorder.length-1;
        return helper(postorder, 0, inorder.length - 1);
    }
    
    public TreeNode helper(int[] postorder, int start, int end){
        
        if(start>end) return null;
        int rootVal = postorder[index];
        index--;
        TreeNode root = new TreeNode(rootVal);
        int rootIndex = map.get(rootVal);
        
        root.right = helper(postorder, rootIndex + 1, end);
        root.left = helper(postorder, start, rootIndex-1);
       
        
        return root;
    }
}
2 solutions--resursive and iterative
// Time Complexity : O(n)
// Space Complexity : O(h)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach

we want to maintain number constructed till each node, so we maintain it in a stack, the number construction will be considered to be stopped when we reachbleaf node(left and right are null)
So, nc we rerach there we add the number to sum, we pop and go towards othe leaves
Number can be constructed as current number * 10 + root.val where we start currNum as 0 initially
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int sum=0;
  
    public int sumNumbers(TreeNode root) {
        helper(root, 0);
        return sum;
    }
    
    public void helper(TreeNode root, int num){
           if(root==null){
            return;
        }
          if(root.left==null && root.right==null){
            sum += num*10 +root.val;
        }
        
        helper(root.left, num*10 +root.val);//2nd parameter is the value of current node
        helper(root.right, num*10 +root.val);//2nd parameter is the value of current node
        
    }
}


Iterative approach


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class Pair{

	TreeNode node;
	int value;

	public Pair(TreeNode node, int value){
	this.node= node;
	this.value=value;
	}

	public TreeNode getNode(){
	return this.node;
	}

	public int getValue(){
	return this.value;
	}
}
    
    
    public int sumNumbers(TreeNode root) {
        int sum=0;
        int currNum=0;
        Stack<Pair> stack = new Stack<>();
        while(root!=null || !stack.isEmpty()){
            while(root!=null){
                currNum= currNum*10 + root.val;
                Pair p= new Pair(root, currNum);
                stack.push(p);
                root=root.left;
            }
            Pair p =stack.pop();
            root = p.getNode();
            currNum=p.getValue();
            
            if(root.left==null && root.right==null){
                sum += currNum;
            }
            root=root.right;
        }
        return sum;
    }
}

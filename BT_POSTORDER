//TimeComplexity O(n)
//Spacecomplexity O(n)

class Solution {
    HashMap<Integer,Integer> map;
    int index;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        index = postorder.length - 1;
        map= new HashMap<>();

        for(int i = 0 ; i < inorder.length; i++){
            map.put(inorder[i],i);
        }

        return helper(postorder,0,inorder.length-1);

    }

    private TreeNode  helper(int[] postorder,int start,int end){
    if(start > end)return null;
System.out.println(index);

int val = postorder[index];
index--;

    int curr_index = map.get(val);
    TreeNode root = new TreeNode(val);
 root.right = helper(postorder,curr_index +1, end);
    root.left = helper(postorder,start,curr_index -1);
   
    return root;
    }
}

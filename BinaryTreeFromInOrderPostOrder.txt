/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    /**
    Time Complexity - O(N)
    Space Complexity - O(N)
     */
    int rootIdx;
    private Map<Integer, Integer> inorderMap;

    public TreeNode buildTree(int[] inorder, int[] postorder) {
        this.inorderMap = new HashMap<>();
        rootIdx  = postorder.length -1;

        for(int i=0; i<inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        return helper(inorder, postorder, 0, inorder.length-1);
    }

    private TreeNode helper(int[] inorder, int[] postorder, int start, int end) {
        if (start > end) {
            return null;
        }

        int rootValue = postorder[rootIdx];

        TreeNode root = new TreeNode(rootValue);

        int index = inorderMap.get(rootValue);

        rootIdx--;

        root.right = helper(inorder, postorder, index+1, end);
        root.left = helper(inorder, postorder, start,index-1);
        return root;

    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    Map<Integer, Integer> hm;
    int index;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        hm = new HashMap<>();
        for(int i = 0; i < inorder.length; i++) {
            hm.put(inorder[i], i);
        }
        index = postorder.length - 1;
        return helper(inorder, postorder, 0, inorder.length-1);
    }
    
    private TreeNode helper(int[] inorder, int[] postorder, int start, int end) {
        //Base
        if(start > end) { return null; }
        
        //logic
        int rootVal = postorder[index];
        index --;
        TreeNode root = new TreeNode(rootVal);
        
        int rootIndex = hm.get(rootVal);
        root.right = helper(inorder, postorder, rootIndex + 1, end);
        root.left = helper(inorder, postorder, start, rootIndex - 1);
        return root;
    }
}

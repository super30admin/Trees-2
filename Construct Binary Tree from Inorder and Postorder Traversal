// Time Complexity :O(n) n is number of nodes.
// Space Complexity :O(n) + recursion stack O(h). n is number of nodes and h is height 
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(postorder == null || postorder.length==0) return null;
        
        TreeNode root = new TreeNode(postorder[postorder.length-1]);
        
        int index=-1;
        
        for(int i=0;i<inorder.length;i++){
            if(inorder[i]==root.val){
                index=i;
                break;
            }
        }
        
        int [] inleft=Arrays.copyOfRange(inorder,0,index);
        int [] inright=Arrays.copyOfRange(inorder, index+1, inorder.length);
        
        int[] postleft=Arrays.copyOfRange(postorder, 0,index);
        int [] postright = Arrays.copyOfRange(postorder,index, postorder.length-1);
        
        root.left=buildTree(inleft,postleft);
        root.right=buildTree(inright,postright);
        
        return root;
    }
}

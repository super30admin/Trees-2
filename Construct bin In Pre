/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        if(preorder.length == 0 || inorder.length == 0)
            return null;
        
        TreeNode root = new TreeNode (preorder[0]);
        int inOrderIndex=0;
        
        for(int i=0;i<inorder.length;i++)
        {
            if(inorder[i] == root.val)
            {
                inOrderIndex = i;
                break;
            }
        }
            
            int[] leftSubtreePreorder = Arrays.copyOfRange(preorder,1,inOrderIndex+1);
            int[] leftSubtreeInorder = Arrays.copyOfRange(inorder, 0, inOrderIndex);
            int[] rightSubtreePreorder = Arrays.copyOfRange(preorder, inOrderIndex+1, preorder.length);
            int[] rightSubtreeInorder = Arrays.copyOfRange(inorder, inOrderIndex+1, inorder.length);
            
            root.left = buildTree(leftSubtreePreorder, leftSubtreeInorder);
            root.right = buildTree(rightSubtreePreorder, rightSubtreeInorder);
            
  
          return root;
    }
}

//https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/
//tc-O(n)
//sc-O(n)
class Solution {
    HashMap<Integer, Integer> map;
    int idx;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(inorder == null || inorder.length ==0 || postorder == null || postorder.length ==0)
        {
            return null;
        }
        map = new HashMap<>();
        idx = postorder.length-1;
        
        for(int i =0;i<inorder.length;i++)
        {
            map.put(inorder[i] , i);
        }
        return helper(postorder , 0 , postorder.length-1);
    }
    
    private TreeNode helper(int[] postorder , int start , int end)
    {
        //base
         if(start>end || idx<0) return null;
        //logic
        System.out.println(idx);
       int rootVal = postorder[idx--];
        
        
        TreeNode root = new TreeNode(rootVal);
        int rootIdx = map.get(rootVal);
        
        root.right = helper(postorder, rootIdx+1, end);
        root.left = helper(postorder, start, rootIdx-1);
        return root;
    }
}
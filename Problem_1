// Time Complexity : O(n) where n is the number of nodes in the tree
// Space Complexity : O(h) where h is the height of the tree
// Did this code successfully run on Leetcode : Yes

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if( inorder == null || inorder.length == 0) return null;
        
        int root = postorder[postorder.length -1];
        TreeNode tree = new TreeNode(root);
        int index = -1;
        for(int i = 0; i< inorder.length;i++){
            if(inorder[i] == root) {
                index = i; break;
            }
        }
        
        int[] inLeft = Arrays.copyOfRange(inorder, 0, index);
        int[] inRight = Arrays.copyOfRange(inorder, index + 1, inorder.length);
        
        int[] postLeft = Arrays.copyOfRange(postorder, 0, index);
        int[] postRight = Arrays.copyOfRange(postorder, index, postorder.length -1);
        
        tree.left = buildTree(inLeft , postLeft);
        tree.right = buildTree(inRight, postRight);
        
        return tree;
    }
    
}

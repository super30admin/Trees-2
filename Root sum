/**
* This is while pattern 
* Time complexity : O(n) as we are traversing all the nodes
*Space complexity: O(h) as worst case the nodes in recursive stack are not going to be more than height of the tree
*/

class Solution {
    class Pair{
    TreeNode node;
    int value;
    
    public Pair(TreeNode node,int value){
        this.node=node;
        this.value=value;
    }
    public int getValue(){
        return this.value;
    }
    public TreeNode getKey(){
        return this.node;
    }
    
}
    public int sumNumbers(TreeNode root) {
        
        if(root == null) return 0;
        int result=0;
        int currentSum=0;
        Stack<Pair> stack=new Stack();
        while(root!=null || !stack.isEmpty()){
            
            while(root!=null){
               currentSum= currentSum*10+root.val;
                stack.push(new Pair(root,currentSum));
                root=root.left;
            }
            Pair p=stack.pop();
            root=p.getKey();
            currentSum=p.getValue();
            if(root.left==null && root.right==null){
                result=result+currentSum;
            }
            root=root.right;
        }
        return result;
        
    } 
}

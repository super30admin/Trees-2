/**
Time O(n)
Space O(n)
Leetcode yes
problem no

Same approach as discussed in class
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
          if(postorder.length==0) return null;
        
        TreeNode root = new TreeNode(postorder[postorder.length-1]);
        
        int index = -1;
        
        //Finding index of root from inorder
        for(int i=0; i<inorder.length;i++)
        {
            if(inorder[i] == root.val)
            {
                index = i;
                break;
            }
            
        }
        
        System.out.println(index); 
         int[] inLeft = Arrays.copyOfRange(inorder , 0, index);
        int[] postRight = Arrays.copyOfRange(postorder ,index, postorder.length-1);
        int[] inRight = Arrays.copyOfRange(inorder , index+1,  inorder.length);
        int[] postLeft = Arrays.copyOfRange(postorder , 0,index);
        
        root.left = buildTree(inLeft,postLeft);
        root.right = buildTree(inRight,postRight);
        
        return root;
        
    }
}
 

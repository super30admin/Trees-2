// Time Complexity :O(n)
// Space Complexity :O(n) - hash map
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
preorder -> postorder 

// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer,Integer> map;
    int index;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        if(postorder.length ==0 || postorder ==null)
            return null;
        
        map = new HashMap<>();
        index = postorder.length -1;
        for(int i=0; i< inorder.length; i++)
        {
            map.put(inorder[i],i);
        }
        return helper(postorder,0, postorder.length-1);
    }
    
    private TreeNode helper(int[] postorder, int start, int end)
    {
        if(start > end || index < 0)
        {
            return null;
        }
       
        TreeNode root = new TreeNode(postorder[index]);
        index--;
        int indx = map.get(root.val);
       // System.out.println("root.val "+root.val+" start = "+start+" indx ="+indx+" end ="+end);
        root.right = helper(postorder, indx+1, end);
         root.left = helper(postorder, start, indx -1);
        return root;
        
    }
}

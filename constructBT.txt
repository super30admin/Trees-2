//Time Complexity : O(n) 
//Space Complexity : O(n) 
// Did this code successfully run on Leetcode : Yes



class Solution 
{
    HashMap<Integer, Integer> hmap = new HashMap<Integer, Integer>();
    int idx;
    public TreeNode buildTree(int[] inorder, int[] postorder) 
    {
        idx = postorder.length-1;
        
        for(int i=0;i<inorder.length;i++)
        {
            hmap.put(inorder[i], i);
        }
        
        return recurr(postorder, inorder, 0, postorder.length-1);
    }
    
    public TreeNode recurr(int[] postorder, int[] inorder, int start, int end)
    {
        if(start > end || idx<0)
        {
            return null;
        }
        
        int rootVal = postorder[idx];
        //System.out.println(idx);
        idx--;
        TreeNode root = new TreeNode(rootVal);
        int rootIdx = hmap.get(rootVal);
        
        
        root.right = recurr(postorder, inorder,rootIdx+1, end );
        root.left = recurr(postorder,inorder, start, rootIdx-1);
        
        return root;
    }
}
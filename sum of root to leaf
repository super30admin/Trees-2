// Time Complexity : O(n) - 
// Space Complexity :O(1) plus recursive stack - O(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
deciding sum to recursive call

// Your code here along with comments explaining your approach
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     int answer;
    public int sumNumbers(TreeNode root) {
       
        
        if(root == null)
            return 0;
        
        helper(root, 0);
        return answer;
    }
    
    private void helper(TreeNode root, int sum)
    {
        if(root == null)
            return;
        
        int currSum = sum* 10 + root.val;
        helper(root.left, currSum);
        
        if(root.left == null && root.right == null)
        {
            answer += sum*10 + root.val;
        }
        
        helper(root.right, currSum);
    }
}

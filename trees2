Construct Binary Tree from Inorder and Postorder Traversal
#tc: O(n)
#sc: O(n)
class Solution:
    def buildTree(self, inorder, postorder):
        map_inorder = {}
        for i, val in enumerate(inorder): map_inorder[val] = i
        def recur(low, high):
            if low > high: return None
            x = TreeNode(postorder.pop())
            mid = map_inorder[x.val]
            x.right = recur(mid+1, high)
            x.left = recur(low, mid-1)
            return x
        return recur(0, len(inorder)-1)
        

Sum Root to Leaf Numbers
#tc: O(n)
#sc: O(n)
class Solution(object):
    def sumNumbers(self, root):
        if not root:return 0
        stack=[(root,str(root.val))]
        res=0
        while stack:
            root,s=stack.pop()
            if not root.left and not root.right:
                res+=int(s)
            if root.left:
                stack.append((root.left,s+str(root.left.val)))
            if root.right:
                stack.append((root.right,s+str(root.right.val)))
        return res
